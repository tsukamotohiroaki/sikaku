LPIC_Lv1-101(Ver5.0)
1.システムアーキテクチャ
■ハードウェア設定の決定と設定
・ロードされているカーネルモジュールの情報を表示するコマンド
lsmod
cat /proc/modules

・I/Oポートアドレスの情報を確認できるファイル
/proc/ioports

・メモリの使用状況を確認できるファイル
/proc/meminfo

・udevが使用するデバイス設定情報ファイルの所在
/etc/udev/rules.d

・modprobeの設定ファイル
/etc/modprobe.d/myconfig.conf

・起動中のプロセスやカーネルが認識しているハードウェアおよびシステムリソースなどの情報が格納されているディレクトリ
/proc

・modprobeの設定ファイルに記述する設定内容
options: 各カーネルモジュールのデフォルトパラメータを指定する
alias: カーネルモジュールに別名をつける
install: 特定のカーネルモジュールのロード時に実行されるコマンドを指定する
remove: 特定のカーネルモジュールのアンロード時に実行されるコマンドを指定する
blacklist: ロードしたくないカーネルモジュールを指定する

・SCSIデバイスに関する情報が確認できるファイル
/proc/scsi/scsi

・接続されたUSBデバイスの情報を表示するコマンド
lsusb
cat /proc/bus/usb/devices

・スピーカー、マイクなどが属しているUSBのデバイスクラス
Audio Class

・D-Bus（Desktop Bus）についての説明
Linuxで使われるプロセス間通信機構

・モデム、TA(ターミナルアダプタ)などが属しているUSBのデバイスクラス
ACM Communication Device Class

・ホットプラグデバイスを接続した際に、デバイスファイルを動的に作成する仕組み
udev(Userspace DEVice management)

・ハードディスク、USBメモリーなどが属しているUSBのデバイスクラス
Mass Storage Class

・依存関係を考慮してカーネルモジュールをロードまたはアンロードするコマンド
modprobe

・PCIデバイスの情報を表示するコマンド
lspci
cat /proc/bus/pci/devices
※PCI(Peripheral Components Interconnect)デバイスとは、PCIバスに接続されたデバイスのこと

・デバイスが使用中のDMAチャネルに関する情報が確認できるファイル
/proc/dma
※DMAとは、CPUを介することなくメインメモリと周辺機器の間で直接的に情報転送を行う方式のこと

・lspciコマンドで取得できる情報
I/Oポートアドレス
ベンダー名（ベンダーID）
バスの速度
IRQ番号

・IRQに関する情報が格納されているファイル
/proc/interrupts
※IRQ(Interrupt ReQuest)とは、マウスやキーボードなどの周辺機器(デバイス)からCPUへの割り込み要求のこと

・BIOS/UEFIで設定できるもの
起動デバイスの優先順位
デバイスの有効/無効化

・キーボード、マウスなどが属しているUSBのデバイスクラス
HID(Human Interface Devices)

・CPUに関する情報を確認できるファイル
/proc/cpuinfo

・大容量記憶装置の特徴
SSDとUSBフラッシュドライブは、HDDのような機械的な故障が起きない
容量あたりのコストパフォーマンスが高いのはHDDである
OSの起動ディスクとして使用できる
SSDはSATAインターフェース以上の速度でアクセスできる

■システムの起動
・Linux システムの起動順序（ブートプロセス）
BIOS/UEFI → ブートローダ → カーネル → init

・BIOSの特徴
電源を入れると起動し、記憶装置（HDD）等に関して最低限の認識を行う
起動する順にデバイスの先頭セクタにあるMBRを読み込み、ブートローダが得られたら制御を移す
起動デバイスの順序を設定できる

・UEFIの特徴
GUIでの操作が可能となる
最初にアクセスされる領域であるESPは「/boot/efi」にマウントされる
GPTというパーティション形式に対応しており、3TB以上のHDDからの起動をサポートする

・100GBの記憶装置(HDD)を接続したが、実際の半分以下の容量で認識されてしまった場合の解決方法
BIOSをアップデートする

・Linuxがハードディスクから正常に起動できなくなった場合、インストールDVDを用いて試してみるべきこととして適切なもの
レスキューモードでの起動を試みる
ハードディスク内のログを確認する

・システム起動時にブートローダからカーネルに渡されたパラメータが確認できるファイル
/proc/cmdline

・システム起動時においてのブートローダの説明
記憶装置（HDD）内のカーネルをロードし、制御を移す

・カーネルのログなどが記録されるLinuxでメインのログファイル
/var/log/messages

・起動時にカーネルが出力したメッセージを表示するコマンド
dmesg

・マシンを再起動せずにカーネルのリングバッファの内容をクリアするコマンド
dmesg --clear
※dmesgコマンドはカーネルが出力するメッセージが格納されるリングバッファの内容を出力する。

・システム起動時においてのカーネルの説明
高度にハードウェアを認識・制御し、ルートファイルシステムのマウントなど様々な初期化処理を行う
/sbin/initを起動する

・従来のinitプログラムを置き換えるsystemdの特徴
扱う処理をUnitという単位で管理する
サービスの並列起動によって高速なシステム起動や停止が行える
cgroupsでプロセスのリソースを管理する

・SysVinitを採用したシステムの起動時におけるinitの説明
設定ファイル「/etc/inittab」の記述に基づいて、自動起動するべきプロセスを立ちあげるなど、アプリケーションレベルの初期化を行う

・initプログラムであるUpstartの特徴
サービスやタスクを「ジョブ」という単位で扱う
イベント駆動型
サービスの並列起動処理が可能

・initのPID(プロセス ID)
1
※initは最初に起動されるプロセスで、PID（プロセス ID）は必ず1です。

・systemctlコマンドを使って、postfixサービスに設定ファイルを再読み込みさせるコマンド
systemctl reload postfix

・systemdが管理するサービスを再起動させるためのsystemctlコマンドのサブコマンド
restart

・systemdの管理単位であるユニット
※Unitには各機能ごとに拡張子が割り当てられており、拡張子を見ることでどういった機能のためのUnitかが判別できるようになっています。
device：各種デバイスを管理するUnit
mount：ファイルシステムのマウントを管理するUnit
service：サービスを制御するUnit
swap：スワップ領域を管理するUnit
target：複数のサービスを一つのグループにするためのUnit

・systemdが利用できるユニットの一覧を取得するコマンド
systemctl list-unit-files

・systemdが稼働するシステムにおいて、各サービスが稼働しているかを確認するためのサブコマンド
is-active
例)systemctl is-active sshd

・各サービスの稼働状況や起動設定を管理するにはsystemctlコマンド
systemctl status httpd

・systemdを管理するためのコマンド
systemctl

・systemdの動作するシステムにおいて、各サービスが出力するログを扱うデーモンプロセス
systemd-journald

・systemdが稼働するシステムにおいてpostfixサービスを停止するコマンド
systemctl stop postfix

・systemdが稼働するシステムにおいてmysqldサービスを起動するコマンド
systemctl start mysqld

・systemdが稼働するシステムにおいて、システム起動時にhttpdサービスが自動起動させないためのコマンド
systemctl disable httpd

・systemdが稼働するシステムにおいて、システム起動時にhttpdサービスが自動起動するためのコマンド
systemctl enable httpd

・systemdが管理するジャーナル（システムログ）を参照するためのコマンド
journalctl
※systemdの動作するシステムではsystemd-journaldデーモンを動作させ、ログの一元管理を行います。

・journalctlコマンドのオプションで、dmesgコマンドと同じ情報を得られるオプション
-k
--dmesg

■ランレベル/ブートターゲットの変更
・systemdの動作するシステムにおいて、次回起動時にメンテナンスを行うために最低限のシステムサービス状態で起動させたい。次回起動時のターゲットとしてどれを指定すればよいか
rescue.target
runlevel1.target

・systemdの動作するシステムにおいて、メンテナンスのために以下のコマンドでシングルユーザーモードに変更し、作業を行った。
# systemctl rescue
作業が終わったので通常の起動状態に戻したい。どうすれば良いか
Ctrl-Dを入力する
systemctl reboot コマンドを実行する
systemctl default コマンドを実行する

・systemdが稼働するシステムにおいて、次回起動時のランレベルの確認作業を行った。
/etc/systemd/system
default.target

・systemdが稼働するシステムにおいて、次回起動時のターゲットが確認できるsystemctlのサブコマンド
get-default

・systemdが稼働するシステムにおいて、次回起動時のターゲットを設定するためのsystemctlのサブコマンド
set-default

・systemdが稼働するシステムにおいて、次回起動時にグラフィカルログインさせるコマンド
rm -f /etc/systemd/system/default.target
ln -s /lib/systemd/system/graphical.target /etc/systemd/system/default.target

・systemdが稼働するシステムにおいて、次回起動時にグラフィカルログインさせるコマンド
systemctl set-default graphical.target

・「/etc/inittab」を設定ファイルとして使用しないinitプログラム
Upstart
systemd
※Upstartやsystemdは、従来のSysVinitと比べてシステム起動時の初期化作業が高速化されています。
※Upstarは、イベント駆動型の初期化プロセス
※Upstartでは初期化時の依存関係を定義する必要がある
※Upstartは「/etc/event.d/rc-default」ファイルの「telinit 2」の部分を編集することでデフォルトのランレベルを設定できます。
※systemdでは、「/lib/systemd/system/runlevel[0-6].target」ファイル([0-6]部分はランレベルを指定)のシンボリックリンクを「/etc/systemd/system/default.target」として作成することでデフォルトのランレベルを設定できます。

・systemdの動作するシステムにおいて、サーバとして動作させるのに適切な起動時のターゲット
runlevel3.target
multi-user.target

・すでにマルチユーザモードで起動しているシステムをメンテナンスのためにシングルユーザモードに変更するコマンド
init s
telinit 1
telinit S

・ランレベル6の説明
システム再起動

・SysVinitを採用したシステムの特徴
ランレベル3では「/etc/rc3.d」配下のスクリプトが実行される
※SysVinitでは、システムの起動時やランレベルの変更時にinitが「/etc/inittab」を参照し、ランレベルに応じたスクリプトを実行して各種サービスを順に起動/停止していきます。
※各ランレベルに応じたスクリプトは「/etc/rc[0-6].d」に入っています。

・SysVinitを採用したシステムにおいて、シングルユーザモードでのブートプロセス中にサービスを停止させるファイル
/etc/rc1.d/K01bluetooth
※SysVinitでは、システムの起動時やランレベルの変更時にinitが「/etc/inittab」を参照し、ランレベルに応じたスクリプトを実行して各種サービスを順に起動/停止していきます。
※各ランレベルに応じたスクリプトは「/etc/rc[0-6].d」に入っています。

・SysVinitを採用したシステムの設定ファイルで、デフォルトのランレベルの設定ファイル
/etc/inittab

・デフォルトのランレベルとして、設定してはいけないもの
0
6

・現在のランレベルを、どのランレベルにでも変更できるコマンド
init
telinit

・現在および1つ前のランレベルを調べることができるコマンド
runlevel

・マルチユーザモードとなるランレベル
2
3
5

・ランレベル0の説明
システム停止
※ランレベルとはLinuxの動作モードのことです。

・SysVinitの設定ファイル「/etc/inittab」を編集した。即座に変更を反映させるコマンド
init Q
telinit q
※/etc/inittabファイルとは、OSを起動する際、OSの起動を司る「initプロセス」が利用するファイルです。
※/etc/inittabファイルは、デフォルトのランレベルの指定、デバイスなどの初期化、initの起動、ブート時の処理、ランレベルごとのrcスクリプトの実行などを指示します。
※SysVinitの設定ファイル「/etc/inittab」ファイルは通常Linuxシステムの起動時に読み込まれます。
※initまたはtelinitコマンドに「q」か「Q」オプションを指定して実行すると、「/etc/inittab」を再読み込みさせ即座に変更を反映させることができます。

・SysVinitを採用したシステムにおいて、「ctrl+alt+del」キーを押下した際のシステムの動作を設定するファイル
/etc/inittab

・systemctl start poweroff.target を実行すると何が起こるか
システム終了処理が行われる
telinit 0と同じことが起こる

・電源管理に関するACPIイベントを監視・処理するデーモン
acpid

・システムを今すぐ再起動させるコマンド
reboot
telinit 6
shutdown -r now

・23:00にシステムを停止するようshutdownコマンドをキャンセルするコマンド
shutdown -c

・現在22:50である。「Rebooting in 10 minutes」というメッセージを表示して、23:00にサーバを再起動するコマンド
shutdown -r 23:00 "Rebooting in 10 minutes"
shutdown -r +10 "Rebooting in 10 minutes"

・現在22:00である。23:00にサーバを停止するコマンド
shutdown -h 23:00
shutdown -h +60

・システムを今すぐ再起動させるコマンド
telinit 6
shutdown -r now
systemctl reboot
systemctl start reboot.target

・シャットダウン処理を行わず、メッセージ通知のみを行うshutdownコマンドのオプション
-k

・システムを停止させるsystemctlコマンドのサブコマンド
halt
poweroff

・ログイン中の全ユーザーにメッセージを送信するコマンド
wall

